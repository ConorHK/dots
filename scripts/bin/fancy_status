#!/bin/sh

#TODO:
# make rampable icons for audio, brightness, battery, wifi (might be a pita to implement this)
#fix bspwm node flags; they dont appear for some reason

# Clone of orig status_notif script but with fancy option. Had to change output of all functions b/c of my lack
# of foresight

sep='<span foreground="#878787">⏹</span>'

bspwm() {
  active_desktops=$(bspc query -D -d .occupied --names | tr "\n" " ")
	case "$1" in
	-s | --simple)
    echo $(bspc query -D -d focused --names)
    ;;
	-f | --full)
    echo "Active desktops: $active_desktops"
		;;
	esac
}

calendar() {
	time=$(date +"%R")
	date=$(date +"%A, %B %d")

	case "$1" in
	-s | --simple)
		echo "$time"
		;;
	-f | --full)
		env printf "$date"
		;;
	esac
}

soundinfo() {
  volume=$(audio -s volume)
  mute_status=$(audio -s muted)
	case "$1" in
	-s | --simple)
    [ "$mute_status" == "playing" ] && echo "$volume%%" || echo "$mute_status"
		;;
	-f | --full)
    output=$(audio -s output)
    printf "%s\n<span foreground='#878787'>-----------------</span>\nVolume: %s%%\nMute status: %s\n" "$output" "$volume" "$mute_status"
		;;
	esac
}

brightness() {
	case "$1" in
	-s | --simple)
		#brightness=$(busctl call org.clightd.clightd /org/clightd/clightd/Backlight org.clightd.clightd.Backlight Get "s" "" | awk '{print $3*100}')
		#brightness=$(echo "($brightness+0.5)/1" | bc)
		brightness=$(echo "$(xbacklight)/1" | bc)
		echo "$brightness%%"
		;;
	-f | --full)
		FULL=""  #"•"
		EMPTY="" #"○"
		value="${3:-5}"
		#brightness="$(busctl call org.clightd.clightd /org/clightd/clightd/Backlight org.clightd.clightd.Backlight Get "s" "" | awk '{print $3*100}')"
		#brightness=$(echo "($brightness+0.5)/1" | bc)
		brightness=$(echo "$(xbacklight)/1" | bc)
		barFull=$(seq -s "$FULL" $((brightness / 10)) | sed 's/[0-9]//g')
		barEmpty=$(seq -s "$EMPTY" $((11 - brightness / 10)) | sed 's/[0-9]//g')
		printf "%b" "$barFull$barEmpty $brightness%%"
		;;
	esac
}

battery() {
	case "$1" in
	-s | --simple)
		if [ "$(acpi | wc -l)" = "1" ]; then
			if [ "$(acpi | awk '{print $3}')" = "Charging," ]; then
				echo "$(acpi | awk '{print $4}' | cut -d',' -f1)%"
			elif [ "$(acpi | awk '{print $3}')" = "Full," ]; then
				echo "Full"
			else
				echo "$(acpi | awk '{print $4}' | cut -d',' -f1)%"
			fi
		else
			if [ "$(acpi | awk 'NR=2 {print $3}')" = "Charging," ]; then
				echo "$(acpi | awk 'NR=2 {print $4}' | cut -d',' -f1)"
			elif [ "$(acpi | awk 'NR=2 {print $3}')" = "Full," ]; then
				echo "Full"
			else
				echo "$(acpi | awk 'NR=2 {print $4}' | cut -d',' -f1)%"
			fi
		fi
		;;
	-f | --full)
		if [ "$(acpi | wc -l)" = "1" ]; then
			state=$(acpi | awk '{print $3}')
			if [ "$state" = "Charging," ]; then
				percent=$(acpi | awk '{print $4}' | cut -d',' -f1)
				time=$(acpi | awk NR=1 | awk '{print $5, $6, $7}')
				echo "$percent%, $time"
			elif [ "$state" = "Full," ]; then
				echo "Full"
			else
				percent=$(acpi | awk '{print $4}' | cut -d',' -f1)
				time=$(acpi | awk NR=1 | awk '{print $5, $6}')
				echo "$percent%, $time"
			fi
		else
			state=$(acpi | awk 'NR=2 {print $3}')
			if [ "$state" = "Charging," ]; then
				percent=$(acpi | awk 'NR=2 {print $4}' | cut -d',' -f1)
				time=$(acpi | awk 'NR=2 {print $5, $6, $7}')
				echo "$percent%, $time"
			elif [ "$state" = "Full," ]; then
				echo " $sep Full"
			else
				percent=$(acpi | awk 'NR=2 {print $4}' | cut -d',' -f1)
				time=$(acpi | awk 'NR=2 {print $5, $6}')
				echo "$percent%, $time"
			fi
		fi
		;;
	esac
}

internet() {
	case "$1" in
	-f | --full)
		# simple=false
		;;
	-s | --simple | *)
		# simple=true
    echo $(is-connected)
		;;
	esac

	# connection_type=$(nmcli d | grep connected | head -1 | awk '{print $1}')

	# if [ "$connection_type" = "enp4s0" ]; then
	# 	echo "$(nmcli d | grep connected | awk '{print $4}')"
	# elif [ "$connection_type" = "wlp5s0" ]; then
	# 	signal=$(nmcli -g IN-USE,SIGNAL d wifi list | grep "*" | cut -d':' -f2)
	# 	ssid=$(nmcli -g IN-USE,SSID d wifi list | grep "*" | cut -d':' -f2)
	# 	if $simple; then
	# 		echo "$signal%%"
	# 	else
	# 		echo "$signal%%, $ssid"
	# 	fi
	# else
	# 	echo "<span foreground='#af8787'>Net</span> $sep: Disconnected"
	# fi
}

taskwarrior() {
	num=$(task active | wc -l)
	if [ "$num" -gt 1 ]; then
		active_task=$(task rc.gc=no rc.indent.report=4 rc.verbose= rc.report.next.columns=description.desc rc.report.next.labels= rc.defaultwidth=1000 next +ACTIVE 2>/dev/null </dev/null | sed -n '4 p' | awk '$1=$1')
		echo "$active_task"
	else
		echo "No active task"
	fi
}

rdshift() {
	pgrep -x redshift >/dev/null 2>&1
	if [ $? -eq 0 ]; then

		temp=$(redshift -l $(curl -s "https://location.services.mozilla.com/v1/geolocate?key=geoclue" | jq '.location.lat, .location.lng' | tr '\n' ':' | sed 's/:$//') -p 2>/dev/null | grep "Color" | awk '{print $3}')
		#temp=$(redshift -p 2>/dev/null | grep "Color" | awk '{print $3}')
		echo "$temp"
	else
		echo "Disabled"
	fi
}

vpn() {
	connections=$(nmcli d | grep "vpn0\|acer")
	if [ -n "$connections" ]; then
		for c in $connections; do
			name=$(echo "$c" | awk '{print $1}')
			status=$(echo "$c" | awk '{print $3}')
			if [ $(echo "$connections" | wc -l) -gt 1 ]; then
				state="$state, $name $status"
			else
				state="$name $status"
			fi
		done
		echo "$state"
	else
		echo "No connections"
	fi
}
case "$1" in
--bspwm)
	wm=$(bspwm --full)
	notify-send "BSPWM" "$wm"
	#printf "SEC:3\t$wm\n" >$XNOTIFY_FIFO
	;;
--calendar)
	cal=$(calendar --full)
	notify-send "Date" "$cal"
	#printf "SEC:3\t$cal\n" >$XNOTIFY_FIFO
	;;
--audio)
	sound=$(soundinfo --full)
	notify-send "Audio" "$sound"
	#printf "SEC:3\t$sound\n" >$XNOTIFY_FIFO
	;;
--brightness)
	light=$(brightness --full)
	notify-send "Backlight" "$light"
	#printf "SEC:3\t$light\n" >$XNOTIFY_FIFO
	;;
--battery)
	power=$(battery --full)
	notify-send "Battery" "$power"
	#printf "SEC:3\t$power\n" >$XNOTIFY_FIFO
	;;
--internet)
	interweb=$(internet --full)
	notify-send "Internet" "$interweb"
	#printf "SEC:\t3\t$interweb\n" >$XNOTIFY_FIFO
	;;
--vpn)
	vvpn=$(vpn)
	notify-send "VPN" "$vvpn"
	#printf "SEC:3\t$vvpn\n" >$XNOTIFY_FIFO
	;;
--full)
	wm=$(bspwm --full)
	cal=$(calendar --full)
	sound=$(soundinfo --full)
	light=$(brightness --full)
	power=$(battery --full)
	interweb=$(internet --full)
	#bt=$(bluetooth)
	fulll=$(env printf "$wm\n$cal\n$sound\n$light\n$power\n$interweb\n")
	notify-send -t 15000 "Information Overload:" "$fulll"
	#printf "SEC:10\t$wm\t$cal\t$sound\t$light\t$power\t$interweb\t$bt\t$rs\t$vvpn\t$task\n" >$XNOTIFY_FIFO
	;;
--fancy)
	wm=$(env printf "%-60s %s\n" "You_are_on_workspace<span_foreground='#878787'>_" "_</span><span_foreground='#57875f'>$(bspwm --simple)</span>")
	cal=$(env printf "%-60s %s\n" "It_is_currently<span_foreground='#878787'>_" "_</span><span_foreground='#af5f5f'>$(calendar --simple)</span>")
	sound=$(env printf "%-60s %s\n" "Volume_is_<span_foreground='#878787'>_" "_</span><span_foreground='#87afaf'>$(soundinfo --simple)</span>")
	interwebs=$(env printf "%-60s %s\n" "Internet_status_is<span_foreground='#878787'>_" "_</span><span_foreground='#af8787'>$(internet --simple)</span>")
	fanc=$(env printf "$wm\n$cal\n$sound\n$interwebs\n" | tr " " "." | tr "_" " ")
	notify-send -t 10000 "greetings, $USER" "$fanc"
	;;
--simple | *)
	wm=$(bspwm --simple)
	cal=$(calendar --simple)
	soundinfo=$(sound --simple)
	light=$(brightness --simple)
	power=$(battery --simple)
	# interweb=$(internet --simple)
	simple=$(env printf "$wm\n$cal\n$sound\n$light\n$power\n$interweb")
	notify-send -t 10000 "Information Underload:" "$simple"
	#printf "SEC:15\t$simple\n" >$XNOTIFY_FIFO
	;;
esac
